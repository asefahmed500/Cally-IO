# Cally-IO Application Documentation

## Project Overview

Cally-IO is a Next.js web application designed to serve as an AI-powered conversational assistant. It leverages a modern tech stack to provide a seamless and intelligent user experience, allowing users to get answers from a knowledge base of their own documents, with role-based access, lead management, performance analytics, and a call script generator.

## Project Structure

The project follows a standard Next.js App Router structure. Key directories include:

- `/src/app`: Contains the main application routes, pages, and layouts.
  - `/src/app/api`: API routes for server-side logic, like handling chat requests.
  - `/src/app/dashboard`: The main page for authenticated users, featuring the chat panel.
  - `/src/app/settings`: The admin-only page for analytics, system settings, AI agent configuration, and integrations.
  - `/src/app/leads`: The admin-only lead management dashboard.
  - `/src/app/knowledge`: A page for users to manage their documents, with an enhanced view for admins.
  - `layout.tsx`: The root layout for the application.
  - `page.tsx`: The public-facing landing page.

- `/src/ai`: Contains all Genkit-related code for AI functionality.
  - `/src/ai/flows`: Defines the core AI workflows, such as document processing, conversational chat, script generation, and metrics logging.
  - `/src/ai/genkit.ts`: Configures and initializes the Genkit AI instance.

- `/src/components`: Contains reusable React components.
  - `/src/components/chat`: Components specific to the chat interface.
  - `/src/components/layout`: Components for the overall application layout (sidebar, header).
  - `/src/components/leads`: Components specific to the leads dashboard, including the profile view.
  - `/src/components/knowledge`: Components for the knowledge management page.
  - `/src/components/settings`: Components for the settings page forms.
  - `/src/components/ui`: ShadCN UI components (Button, Card, Input, etc.).

- `/src/hooks`: Custom React hooks, such as `useToast` for notifications.

- `/src/lib`: Contains library functions, configurations, and utilities.
  - `/src/lib/appwrite-client.ts`: Appwrite client-side SDK configuration.
  - `/src/lib/appwrite-server.ts`: Appwrite server-side (Node) SDK configuration.
  - `/src/lib/auth.ts`: Authentication helper functions for managing sessions.
  - `/src/lib/settings.ts`: Helpers for getting and updating AI configuration.
  - `/src/lib/utils.ts`: General utility functions.

## Core Workflows

### User Signup & Lead Creation (`/src/app/auth/actions.ts`)
1. A user signs up with their name, email, and password.
2. The `signup` server action creates a new user in Appwrite and assigns them the 'user' label (and 'admin' if their email matches `ADMIN_EMAIL`).
3. Simultaneously, a new document is created in the `leads` collection with the user's details, visible only to admins.
4. **Integration Hooks**: Placeholder comments in this action show where to trigger notifications to Slack, Google Sheets, or other webhooks.

### Document Processing (`/src/ai/flows/process-document.ts`)

1. A file is uploaded via the chat panel (`/src/components/chat/chat-panel.tsx`).
2. The file is sent to Appwrite Storage with user-specific and admin-readable permissions.
3. The `processDocument` Genkit flow is invoked with the file's data.
4. The flow extracts text, splits it into chunks, generates embeddings, and saves them to the "embeddings" collection.

### Knowledge Management (`/src/app/knowledge/page.tsx`)
1. A user navigates to the "My Documents" page.
2. The page fetches and displays a list of only the documents that user has uploaded.
3. The user can filter their documents by name and use the action menu to delete any document.
4. If an admin visits this page, they see a "Knowledge Management" view with all documents from all users, and can delete any of them.

### Conversational Chat (`/src/ai/flows/conversational-chat.ts`)

1. The user visits the dashboard. The app checks if the current time is within configured business hours.
2. If outside hours, the chat is disabled and an away message is shown.
3. If within hours, the user submits a question through the chat panel.
4. The `conversationalRagChat` flow is triggered.
5. It finds the most relevant document chunks for the *current user*.
6. The relevant chunks, AI configuration, conversation history, and question are compiled into a dynamic prompt.
7. The prompt is sent to the Gemini LLM to generate a personality-aligned response.

### Admin Dashboards (`/src/app/settings/page.tsx` & `/src/app/leads/page.tsx`)
1. An admin user navigates to the `/settings` or `/leads` pages.
2. The pages fetch data from "metrics", "leads", and "settings" collections.
3. The data is displayed in performance cards, interactive lead tables, customer profiles, and configuration forms.
4. The Settings page also includes UI for managing integrations (Slack, Google Sheets, etc.), which are currently placeholders ready for backend logic.

## Customization

- **Branding & Colors**: Primary colors and themes can be adjusted in `/src/app/globals.css`.
- **AI Behavior**: Use the Admin Settings UI to configure the AI's personality and instructions. The core prompt template is in `/src/ai/flows/conversational-chat.ts`.
- **Integrations**: Add your custom logic for Slack, Google Sheets, and other webhooks in `/src/app/auth/actions.ts` where the `// TODO` comments are placed.
