
# Cally-IO Application Documentation

## Project Overview

Cally-IO is a feature-complete, production-ready Next.js application designed to serve as an intelligent sales and support co-pilot. It leverages a modern tech stack to provide a seamless and intelligent user experience, allowing users to get answers from a knowledge base of their own documents, manage sales leads through a visual pipeline, and track performance with real-time analyticsâ€”all configurable by an administrator.

## Project Structure

The project follows a standard Next.js App Router structure. Key directories include:

- `/src/app`: Contains the main application routes and pages.
  - `/api`: API routes for server-side logic (chat, history, TTS, Twilio).
  - `/auth`: Server actions for authentication (signup, login, etc.).
  - `/dashboard`: The main page for authenticated users, featuring the chat panel and personal stats.
  - `/settings`: The admin-only page for analytics, user management, system settings, AI agent configuration, and integrations.
  - `/leads`: The lead management dashboard with a visual Kanban pipeline, accessible to all users but with role-specific data views.
  - `/knowledge`: A page for users to manage their documents and for admins to manage the entire knowledge base (documents and FAQs).
- `/src/ai`: Contains all Genkit-related code for AI functionality.
  - `/flows`: Defines the core AI workflows (document processing, chat, script generation, etc.).
  - `/genkit.ts`: Configures and initializes the Genkit AI instance.
- `/src/components`: Reusable React components.
  - `/chat`: Components for the chat interface, including conversation starters and audio playback.
  - `/layout`: Components for the application layout (sidebar, header, theme toggle).
  - `/leads`: Components for the leads dashboard (Kanban board, lead cards, profile view, forms).
  - `/knowledge`: Components for knowledge management (document list, FAQ manager).
  - `/settings`: Components for the settings page (configuration forms, analytics chart, user management).
  - `/ui`: ShadCN UI components (Button, Card, etc.).
- `/src/hooks`: Custom React hooks (`useToast`, `useIsMobile`).
- `/src/lib`: Library functions, configurations, and utilities.
  - `/appwrite-client.ts` & `appwrite-server.ts`: Appwrite SDK configurations.
  - `/auth.ts`: Authentication helpers for managing sessions.
  - `/conversation.ts`: Server-side helpers for managing chat history.
  - `/settings.ts`: Helpers for managing AI configuration.

## Core Workflows

### 1. In-App User Management
- An admin navigates to the Settings page.
- They can view a list of all users in the system.
- They can create a new user by providing a name, email, and password.
- They can promote a regular user to an admin or revoke admin privileges.
- They can delete a user from the system.
- They can trigger a password reset email to be sent to a user.

### 2. Automated AI Calling & Speech Recognition
- An agent clicks "Start Automated Call" on a lead card.
- The `initiateCall` server action triggers Twilio to place an outbound call.
- `initiateCall` creates a log entry in the `call_logs` collection with status "initiated".
- Twilio makes a webhook request to `/api/twilio/call?leadId=<ID>`.
- The `call` API route generates a personalized script and returns TwiML instructions.
- The TwiML instructs Twilio's AI voice to read the script, then asks a question (e.g., "Are you interested?").
- The TwiML's `<Gather>` verb listens for the lead's spoken response.
- Twilio transcribes the speech and sends the result to a second webhook: `/api/twilio/handle-response`.
- This second webhook saves the transcribed text to the `call_logs` document and returns a final TwiML message based on the response (e.g., "Great, a specialist will call you back.") before hanging up.
- As the call progresses, Twilio sends status updates to the `/api/twilio/status` webhook, which updates the `call_logs` document.

### 3. Lead Management & Follow-ups
- The `/leads` page has two views: a visual Kanban pipeline and a "Follow-ups" list.
- **Admins** see all leads. **Agents** see leads they have created or claimed.
- **Lead Claiming**: When an agent moves an unassigned lead from the "New" column, the lead is automatically assigned to them.
- **Lead CRUD & Scheduling**: Agents can create, update, and delete their own leads. They can also schedule a `followUpDate` and add `followUpNotes`.
- **Follow-up Reminders**: The "Follow-ups" tab lists all leads with a scheduled follow-up, sorted by date. Overdue follow-ups are highlighted on lead cards.

### 4. Conversational Chat & History Persistence
- A user submits a question. The backend API finds or creates a conversation document.
- The `conversationalRagChat` flow is triggered. It fetches FAQs and performs a vector search on the user's documents.
- If needed, the AI uses the `webSearch` tool for real-time information.
- The response is streamed to the UI. The user can play back the response as audio.
- The conversation is saved to the database.

## Integrations

The application supports sending real-time notifications for new leads to external systems via webhooks.

### New Lead Webhook
- **Trigger**: A new user signs up in the application.
- **Action**: A `POST` request with the new lead's data (name, email, status, etc.) is sent to the configured webhook URL.
- **Setup**: To enable this, add the following environment variable to your `.env` file:
  ```
  WEBHOOK_URL_NEW_LEAD=https://your-webhook-url.com/new-lead
  ```
  You can use a service like [Zapier](https://zapier.com/) or [Make](https://www.make.com/) to receive this webhook and connect it to other tools like Slack or Google Sheets.

### Developer Notes for Direct Integration
For developers who want to build direct integrations without a middle-man service like Zapier, you can modify the signup action in `/src/app/auth/actions.ts`.

- **Slack**:
  - Install the Slack SDK: `npm install @slack/web-api`
  - Add `SLACK_BOT_TOKEN` and `SLACK_CHANNEL_ID` to your `.env`.
  - Use the `chat.postMessage` method to send a formatted message to your desired channel.

- **Google Sheets**:
  - Install the Google APIs client: `npm install googleapis`
  - Set up a Google Cloud service account and download the JSON credentials file.
  - Set the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to the path of your credentials file.
  - Use the `sheets.spreadsheets.values.append` method to add a new row with the lead data.

## Appwrite Setup

To make the application fully functional, you need to configure your Appwrite project. The following collections are required:

1.  **Storage Bucket**: For storing uploaded documents.
2.  **Database**: Create one database to hold all the following collections.
3.  **Collections**:
    *   **`embeddings`**: Stores document chunks and their vector embeddings.
        - Attributes: `documentId` (string), `fileName` (string), `chunkText` (string), `embedding` (float[], size 768), `userId` (string).
    *   **`metrics`**: Stores user feedback on AI responses.
        - Attributes: `userId` (string), `messageId` (string), `feedback` (string).
    *   **`leads`**: Stores information about leads.
        - Attributes: `userId` (string, **NOT required**), `name` (string), `email` (string), `phone` (string, optional), `company` (string, optional), `jobTitle` (string, optional), `notes` (string, optional), `status` (string), `score` (integer), `lastActivity` (datetime), `agentId` (string, **NOT required**), `followUpDate` (datetime, optional), `followUpNotes` (string, optional).
    *   **`settings`**: A singleton collection for AI and business configuration.
        - Create **one** document with the ID `default_config`.
        - Attributes: `ai_personality` (string), `ai_style` (string), `ai_instructions` (string), `business_hours_enabled` (boolean), `business_hours_start` (string), `business_hours_end` (string), `business_hours_timezone` (string), `away_message` (string), `call_script_template` (string).
    *   **`conversations`**: Stores persistent chat history for each user.
        - Attributes: `userId` (string), `history` (string, size 1000000).
    *   **`faqs`**: Stores admin-curated question-and-answer pairs.
        - Attributes: `question` (string), `answer` (string).
    *   **`call_logs`**: Stores logs of outbound Twilio calls.
        - Attributes: `leadId` (string), `userId` (string), `callSid` (string), `status` (string), `duration` (integer, optional), `recordingUrl` (string, optional), `leadResponse` (string, optional), `speechConfidence` (float, optional).

**Permissions are critical for security.** In general:
- Users should only have CRUD access to their own documents (`Permission.read(Role.user(userId))`).
- Admins (`Role.label('admin')`) should have read access to most data for support and management purposes.
- Public data (like FAQs) can use `Permission.read(Role.any())`.
- Server-managed collections (like `leads`, `call_logs`) should use document-level permissions to grant access to the assigned agent and admins.
