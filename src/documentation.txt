# Cally-IO Application Documentation

## Project Overview

Cally-IO is a Next.js web application designed to serve as an AI-powered conversational assistant. It leverages a modern tech stack to provide a seamless and intelligent user experience, allowing users to get answers from a knowledge base of their own documents, with role-based access, lead management, performance analytics, and a call script generator.

## Project Structure

The project follows a standard Next.js App Router structure. Key directories include:

- `/src/app`: Contains the main application routes, pages, and layouts.
  - `/src/app/api`: API routes for server-side logic, like handling chat, history, or Text-to-Speech requests.
  - `/src/app/auth`: Contains server actions for handling authentication logic (signup, login, logout, password recovery).
  - `/src/app/dashboard`: The main page for authenticated users, featuring the chat panel.
  - `/src/app/settings`: The admin-only page for analytics, system settings, AI agent configuration, and integrations.
  - `/src/app/leads`: The admin-only lead management dashboard, featuring a visual Kanban pipeline view.
  - `/src/app/knowledge`: A page for users to manage their documents and for admins to manage the entire knowledge base, including documents and FAQs.
  - `layout.tsx`: The root layout for the application.
  - `page.tsx`: The public-facing landing page.

- `/src/ai`: Contains all Genkit-related code for AI functionality.
  - `/src/ai/flows`: Defines the core AI workflows, such as document processing, conversational chat, script generation, metrics logging, and Text-to-Speech.
  - `/src/ai/genkit.ts`: Configures and initializes the Genkit AI instance.

- `/src/components`: Contains reusable React components.
  - `/src/components/chat`: Components specific to the chat interface.
  - `/src/components/layout`: Components for the overall application layout (sidebar, header).
  - `/src/components/leads`: Components for the leads dashboard, including the Kanban board, lead cards, and profile view.
  - `/src/components/knowledge`: Components for the knowledge management page, including the interactive FAQ manager.
  - `/src/components/settings`: Components for the settings page forms.
  - `/src/components/ui`: ShadCN UI components (Button, Card, Input, etc.).

- `/src/hooks`: Custom React hooks, such as `useToast` for notifications.

- `/src/lib`: Contains library functions, configurations, and utilities.
  - `/src/lib/appwrite-client.ts`: Appwrite client-side SDK configuration.
  - `/src/lib/appwrite-server.ts`: Appwrite server-side (Node) SDK configuration.
  - `/src/lib/auth.ts`: Authentication helper functions for managing sessions.
  - `/src/lib/conversation.ts`: Server-side helpers for managing chat history persistence.
  - `/src/lib/settings.ts`: Helpers for getting and updating AI configuration.
  - `/src/lib/utils.ts`: General utility functions.

## Core Workflows

### User Authentication (`/src/app/auth/actions.ts` and `/src/app/(auth)`)
1. A user can sign up, log in, or request a password reset.
2. The `signup` server action creates a new user in Appwrite and assigns them the 'user' label (and 'admin' if their email matches `ADMIN_EMAIL`).
3. The `forgotPassword` action sends a recovery email, and `resetPassword` securely updates their credentials.
4. **Integration Hooks**: Placeholder comments in the signup action show where to trigger notifications to Slack, Google Sheets, or other webhooks.

### Knowledge Management (`/src/app/knowledge/actions.ts` & `/src/app/knowledge/page.tsx`)
1.  **Document Upload**: Users upload documents via the chat panel. These are processed and stored by the `processDocument` flow.
2.  **Document Management**: Users can see their own documents on the `/knowledge` page and delete them. Admins see all documents and can delete any of them.
3.  **FAQ Management**: Admins can use the `/knowledge` page to create, update, and delete FAQs. These are stored in a separate collection.

### Conversational Chat & History Persistence (`/src/app/api/chat/route.ts`)

1. The chat panel loads and fetches the user's past messages from `/api/chat/history`.
2. The user submits a question. The backend API finds or creates a "conversation" document for that user.
3. The `conversationalRagChat` flow is triggered. It first fetches all FAQs from the database to use as its primary source of truth. Then, it performs a vector search on the user's own documents to find relevant context.
4. The AI's personality settings, the FAQs, the document context, and the user's full history are all compiled into a prompt for the Gemini LLM.
5. The AI response is streamed to the UI.
6. Once the stream is complete, the final AI message is appended to the history and saved to the database.

### Text-to-Speech (`/src/ai/flows/text-to-speech.ts`)
1. After an AI response is generated, a user can click the speaker icon next to the message.
2. This triggers a request to the `/api/tts` endpoint.
3. The `generateSpeech` flow converts the message text into audio using a TTS model.
4. The audio data is returned to the client and played in the browser.

### Admin Dashboards (`/src/app/settings/page.tsx` & `/src/app/leads/page.tsx`)
1. An admin user navigates to the `/settings` or `/leads` pages.
2. The pages fetch data from "metrics", "leads", and "settings" collections.
3. The data is displayed in performance cards, a visual lead pipeline, customer profiles, and configuration forms.
4. The Settings page also includes UI for managing integrations (Slack, Google Sheets, etc.), which are currently placeholders ready for backend logic.

## Customization

- **Branding & Colors**: Primary colors and themes can be adjusted in `/src/app/globals.css`.
- **AI Behavior**: Use the Admin Settings UI to configure the AI's personality and instructions. The core prompt template is in `/src/ai/flows/conversational-chat.ts`.
- **Integrations**: Add your custom logic for Slack, Google Sheets, and other webhooks in `/src/app/auth/actions.ts` where the `// TODO` comments are placed.

    