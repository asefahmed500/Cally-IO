
# Cally-IO Application Documentation

## Project Overview

Cally-IO is a Next.js web application designed to serve as a feature-rich, AI-powered conversational assistant. It leverages a modern tech stack to provide a seamless and intelligent user experience, allowing users to get answers from a knowledge base of their own documents, with role-based access, lead management, real-time performance analytics, and an AI-driven call script generator.

## Project Structure

The project follows a standard Next.js App Router structure. Key directories include:

- `/src/app`: Contains the main application routes and pages.
  - `/api`: API routes for server-side logic (chat, history, TTS).
  - `/auth`: Server actions for authentication (signup, login, etc.).
  - `/dashboard`: The main page for authenticated users, featuring the chat panel and personal stats.
  - `/settings`: The admin-only page for analytics, system settings, AI agent configuration, and integrations.
  - `/leads`: The lead management dashboard with a visual Kanban pipeline, accessible to all users but with role-specific data views.
  - `/knowledge`: A page for users to manage their documents and for admins to manage the entire knowledge base (documents and FAQs).
- `/src/ai`: Contains all Genkit-related code for AI functionality.
  - `/flows`: Defines the core AI workflows (document processing, chat, script generation, etc.).
  - `/genkit.ts`: Configures and initializes the Genkit AI instance.
- `/src/components`: Reusable React components.
  - `/chat`: Components for the chat interface, including conversation starters and audio playback.
  - `/layout`: Components for the application layout (sidebar, header, theme toggle).
  - `/leads`: Components for the leads dashboard (Kanban board, lead cards, profile view, forms).
  - `/knowledge`: Components for knowledge management (document list, FAQ manager).
  - `/settings`: Components for the settings page (configuration forms, analytics chart).
  - `/ui`: ShadCN UI components (Button, Card, etc.).
- `/src/hooks`: Custom React hooks (`useToast`, `useIsMobile`).
- `/src/lib`: Library functions, configurations, and utilities.
  - `/appwrite-client.ts` & `appwrite-server.ts`: Appwrite SDK configurations.
  - `/auth.ts`: Authentication helpers for managing sessions.
  - `/conversation.ts`: Server-side helpers for managing chat history.
  - `/settings.ts`: Helpers for managing AI configuration.

## Core Workflows

### 1. User Authentication & Lead Creation
- A user signs up, logs in, or requests a password reset.
- The `signup` server action creates a user in Appwrite, assigns a `user` or `admin` role, and simultaneously creates a corresponding document in the `leads` collection with the `agentId` set to `null`.
- **Manual Lead Creation**: Any logged-in user (acting as an agent) can manually create new leads from the `/leads` page. These leads are automatically assigned to them via the `agentId` field.

### 2. Knowledge Management & Document Processing
- A user uploads a document (PDF, DOCX, TXT) or an image (PNG, JPG) via the chat panel.
- The file is sent to Appwrite Storage with user-specific permissions.
- The `processDocument` Genkit flow extracts text, splits it into chunks, generates embeddings, and saves them to the `embeddings` collection with secure, role-based permissions.
- Admins can use the `/knowledge` page to manage all documents and create/update/delete company-wide FAQs.

### 3. Conversational Chat & History Persistence
- A user submits a question. The backend API finds or creates a conversation document for that user.
- The `conversationalRagChat` flow is triggered. It first fetches all FAQs to use as its primary source of truth. If no FAQ matches, it performs a vector search on the user's documents to find relevant context.
- The AI's personality settings, FAQs, document context, and the user's full conversation history are compiled into a prompt for the Gemini LLM.
- The AI response is streamed to the UI. The user can rate the response or have it read aloud using Text-to-Speech.
- Once the stream is complete, the final AI message is appended to the history and saved to the database, ensuring persistence across sessions and devices.

### 4. Lead Management & Call Script Generation
- The `/leads` page is a visual Kanban pipeline.
- **Admins** see all leads in the system.
- **Regular Users (Agents)** see leads they have manually created, plus any unassigned leads from new signups.
- **Lead Claiming**: When an agent moves an unassigned lead from the "New" column, the lead is automatically assigned to them (`agentId` is set to their user ID).
- **Lead CRUD**: Agents can create, update, and delete their own leads. Admins can manage all leads.
- Any user can click "Generate Script & Call" on a lead card to trigger the `initiateCall` server action.
- This action calls the `generateCallScript` Genkit flow, which combines the master template (from admin settings) with the lead's specific data to create a personalized script.

### 5. Admin & Agent Dashboards
- The `/dashboard` page provides a personalized view. All users see their chat panel. 
- **Agents** see personal performance stats (total assigned leads, conversion rate, avg. score) based *only* on leads assigned to them.
- The `/settings` page is admin-only and provides a global performance dashboard and system configuration.

## Appwrite Setup

To make the application fully functional, you need to configure your Appwrite project. The following collections are required:

1.  **Storage Bucket**: For storing uploaded documents.
2.  **Database**: Create one database to hold all the following collections.
3.  **Collections**:
    *   **`embeddings`**: Stores document chunks and their vector embeddings.
        - Attributes: `documentId` (string), `fileName` (string), `chunkText` (string), `embedding` (float[], size 768), `userId` (string).
    *   **`metrics`**: Stores user feedback on AI responses.
        - Attributes: `userId` (string), `messageId` (string), `feedback` (string).
    *   **`leads`**: Stores information about leads.
        - Attributes: `userId` (string, **NOT required**), `name` (string), `email` (string), `phone` (string, optional), `company` (string, optional), `jobTitle` (string, optional), `notes` (string, optional), `status` (string), `score` (integer), `lastActivity` (datetime), `agentId` (string, **NOT required**).
    *   **`settings`**: A singleton collection for AI and business configuration.
        - Create **one** document with the ID `default_config`.
        - Attributes: `ai_personality` (string), `ai_style` (string), `ai_instructions` (string), `business_hours_enabled` (boolean), `business_hours_start` (string), `business_hours_end` (string), `business_hours_timezone` (string), `away_message` (string), `call_script_template` (string).
    *   **`conversations`**: Stores persistent chat history for each user.
        - Attributes: `userId` (string), `history` (string, size 1000000).
    *   **`faqs`**: Stores admin-curated question-and-answer pairs.
        - Attributes: `question` (string), `answer` (string).

**Permissions are critical for security.** In general:
- Users should only have CRUD access to their own documents (`Permission.read(Role.user(userId))`).
- Admins (`Role.label('admin')`) should have read access to most data for support and management purposes.
- Public data (like FAQs) can use `Permission.read(Role.any())`.
- Server-managed collections (like `leads`) should use document-level permissions to grant access to the assigned agent and admins.
