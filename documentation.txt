# Cally-IO Application Documentation

## Project Overview

Cally-IO is a feature-complete, production-ready Next.js application designed to serve as an intelligent sales and support co-pilot. It leverages a modern tech stack to provide a seamless and intelligent user experience, allowing users to get answers from a knowledge base of their own documents, manage sales leads through a visual pipeline, and track performance with real-time analyticsâ€”all configurable by an administrator.

## Project Structure

The project follows a standard Next.js App Router structure. Key directories include:

- `/src/app`: Contains the main application routes and pages.
  - `/api`: API routes for server-side logic (chat, history, TTS, Twilio).
  - `/auth`: Server actions for authentication (signup, login, etc.).
  - `/dashboard`: The main page for authenticated users, featuring the chat panel and personal stats.
  - `/settings`: The admin-only page for analytics, user management, system settings, AI agent configuration, and integrations.
  - `/leads`: The lead management dashboard with a visual Kanban pipeline, accessible to all users but with role-specific data views.
  - `/knowledge`: A page for users to manage their documents and for admins to manage the entire knowledge base (documents and FAQs).
- `/src/ai`: Contains all Genkit-related code for AI functionality.
  - `/flows`: Defines the core AI workflows (document processing, chat, script generation, etc.).
  - `/tools`: Contains custom AI tools, such as the web search tool.
  - `/genkit.ts`: Configures and initializes the Genkit AI instance.
- `/src/components`: Reusable React components.
  - `/chat`: Components for the chat interface, including conversation starters and audio playback.
  - `/layout`: Components for the application layout (sidebar, header, theme toggle).
  - `/leads`: Components for the leads dashboard (Kanban board, lead cards, profile view, forms).
  - `/knowledge`: Components for knowledge management (document list, FAQ manager, content suggestions).
  - `/settings`: Components for the settings page (configuration forms, analytics chart, user management, usage statistics).
  - `/ui`: ShadCN UI components (Button, Card, etc.).
- `/src/hooks`: Custom React hooks (`useToast`, `useIsMobile`).
- `/src/lib`: Library functions, configurations, and utilities.
  - `/appwrite-client.ts` & `appwrite-server.ts`: Appwrite SDK configurations.
  - `/auth.ts`: Authentication helpers for managing sessions.
  - `/conversation.ts`: Server-side helpers for managing chat history.
  - `/settings.ts`: Helpers for managing AI configuration.
  - `/analytics.ts`: Helpers for logging analytics events.

## Core Workflows

### 1. In-App User Management
- An admin navigates to the Settings page.
- They can view a list of all users in the system.
- They can create a new user by providing a name, email, and password.
- They can promote a regular user to an admin or revoke admin privileges.
- They can delete a user from the system.
- They can trigger a password reset email to be sent to a user.

### 2. Automated AI Calling & Speech Recognition
- An agent clicks "Start Automated Call" on a lead card.
- The `initiateCall` server action triggers Twilio to place an outbound call.
- `initiateCall` creates a log entry in the `call_logs` collection with status "initiated".
- Twilio makes a webhook request to `/api/twilio/call?leadId=<ID>`.
- The `call` API route generates a personalized script and returns TwiML instructions.
- The TwiML instructs Twilio's AI voice to read the script, then asks a question (e.g., "Are you interested?").
- The TwiML's `<Gather>` verb listens for the lead's spoken response.
- Twilio transcribes the speech and sends the result to a second webhook: `/api/twilio/handle-response`.
- This second webhook uses an AI flow (`interpretSpokenResponse`) to understand the lead's intent. It saves the interpreted summary (e.g., "[POSITIVE] The lead expressed interest") to the `call_logs` document and returns a dynamic, final TwiML message before hanging up.
- As the call progresses, Twilio sends status updates to the `/api/twilio/status` webhook, which updates the `call_logs` document.

### 3. Lead Management & Follow-ups
- The `/leads` page has two views: a visual Kanban pipeline and a "Follow-ups" list.
- **Admins** see all leads. **Agents** see leads they have created or claimed.
- **Lead Claiming**: When an agent moves an unassigned lead from the "New" column, the lead is automatically assigned to them.
- **Lead CRUD & Scheduling**: Agents can create, update, and delete their own leads. They can also schedule a `followUpDate` and add `followUpNotes`.
- **Follow-up Reminders**: The "Follow-ups" tab lists all leads with a scheduled follow-up, sorted by date. Overdue follow-ups are highlighted on lead cards.

### 4. Conversational Chat & History Persistence
- A user submits a question. The backend API finds or creates a conversation document.
- The `conversationalRagChat` flow is triggered. It fetches FAQs from Appwrite, and performs a vector search on user documents.
- If the AI needs external or real-time information, it uses the `webSearch` tool (powered by Tavily).
- The response is streamed to the UI. The user can play back the response as audio.
- The conversation is saved to the database.

## Partners & Credits

This project is proud to partner with leading companies in the AI and cloud space. As part of these partnerships, you can get access to special credits and features to build and scale your application:

- **Tavily**: Get Tavily credits and exclusive beta access to Tavily Crawl for advanced, real-time web search capabilities.
- **Appwrite**: Utilize Appwrite Cloud credits for your backend needs, including databases, authentication, storage, and serverless functions.
- **Keywords AI**: Receive credits for Keywords AI to implement robust LLM monitoring and analytics.
- **Mem0**: Get access to Mem0 Pro credits to build a persistent and intelligent memory layer for your AI agents.

## Integrations

### New Lead Webhook (for CRMs like Superdev.build, HubSpot, etc.)
- **Trigger**: A new user signs up in the application.
- **Action**: A `POST` request with the new lead's data (name, email, status, etc.) is sent to the configured webhook URL.
- **Setup**: To enable this, add the following environment variable to your `.env` file:
  ```
  WEBHOOK_URL_NEW_LEAD=https://your-webhook-url.com/new-lead
  ```
  You can use a service like [Zapier](https://zapier.com/), [Make](https://www.make.com/), or [Superdev.build](https://www.superdev.build/) to receive this webhook and connect it to other tools like Slack or Google Sheets.

## Appwrite Setup

To make the application fully functional, you need to configure your Appwrite project. The following collections are required:

1.  **Storage Bucket**: For storing uploaded documents.
2.  **Database**: Create one database to hold all the following collections.
3.  **Collections**:
    *   **`embeddings`**: Stores document chunks and their vector embeddings.
        - Attributes: `documentId` (string, required), `fileName` (string, required), `chunkText` (string, required, size 10000), `embedding` (float[], size 768, required), `userId` (string, required).
    *   **`metrics`**: Stores user feedback on AI responses.
        - Attributes: `userId` (string, required), `messageId` (string, required), `feedback` (string, required), `prompt` (string, size 8192, **not** required).
    *   **`leads`**: Stores information about leads.
        - Attributes: `userId` (string, **not** required), `name` (string, required), `email` (string, required), `phone` (string, **not** required), `company` (string, **not** required), `jobTitle` (string, **not** required), `notes` (string, size 8192, **not** required), `status` (string, required), `score` (integer, required), `lastActivity` (datetime, required), `agentId` (string, **not** required), `followUpDate` (datetime, **not** required), `followUpNotes` (string, size 8192, **not** required).
    *   **`settings`**: A singleton collection for AI and business configuration.
        - Create **one** document with the ID `default_config`.
        - Attributes: `ai_personality` (string, required), `ai_style` (string, required), `ai_instructions` (string, required, size 8192), `business_hours_enabled` (boolean, required), `business_hours_start` (string, required), `business_hours_end` (string, required), `business_hours_timezone` (string, required), `away_message` (string, required, size 8192), `call_script_template` (string, required, size 8192).
    *   **`conversations`**: Stores persistent chat history for each user.
        - Attributes: `userId` (string, required), `history` (string, size 1000000, required).
    *   **`faqs`**: Stores admin-curated question-and-answer pairs.
        - Attributes: `question` (string, required), `answer` (string, required, size 8192).
    *   **`call_logs`**: Stores logs of outbound Twilio calls.
        - Attributes: `leadId` (string, required), `userId` (string, required), `callSid` (string, required), `status` (string, required), `duration` (integer, **not** required), `recordingUrl` (string, **not** required), `leadResponse` (string, **not** required, size 8192), `speechConfidence` (float, **not** required).
    *   **`analytics_logs`**: Stores events for advanced analytics.
        - Attributes: `eventType` (string, required), `eventData` (string, size 10000, required), `userId` (string, required).

**Permissions are critical for security.** In general:
- Users should only have CRUD access to their own documents (`Permission.read(Role.user(userId))`).
- Admins (`Role.label('admin')`) should have read access to most data for support and management purposes.
- Public data (like FAQs) can use `Permission.read(Role.any())`.
- Server-managed collections (like `leads`, `call_logs`) should use document-level permissions to grant access to the assigned agent and admins.
